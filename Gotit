describe('Filename Generation Tests', () => {
  const filenameReferenceNumber = 'ABC123';
  const timestamp = '20241118';

  // Mock the main function
  const mainFunction = (trades, cumulative, preview) => {
    // Call the existing generateFilename function (assumed imported)
    return generateFilename(trades, cumulative, preview, filenameReferenceNumber, timestamp);
  };

  it('should handle Single FX linked to Multiple ATPs', () => {
    const trades = [{ id: 1 }];
    const cumulative = { atps: [{}, {}] };
    const preview = { atpsCollective: [] };

    const filename = mainFunction(trades, cumulative, preview);

    expect(filename).toBe('ATP-ABC123-1-20241118');
  });

  it('should handle preview data with Multiple ATPs', () => {
    const trades = [];
    const cumulative = {};
    const preview = { atpsCollective: [{}, {}] };

    const filename = mainFunction(trades, cumulative, preview);

    expect(filename).toBe('ATP-ABC123-1-20241118');
  });

  it('should handle Single FX linked to Single ATP', () => {
    const trades = [{ id: 1 }];
    const cumulative = { atps: [{}] };
    const preview = { atpsCollective: [] };

    const filename = mainFunction(trades, cumulative, preview);

    expect(filename).toBe('ATP-ABC123-20241118');
  });

  it('should handle Multiple FX linked to Single ATP', () => {
    const trades = [{ id: 1 }, { id: 2 }];
    const cumulative = { atps: [{}] };
    const preview = { atpsCollective: [] };

    const filename = mainFunction(trades, cumulative, preview);

    expect(filename).toBe('ATP-MultiFX-20241118');
  });

  it('should handle preview data with Single ATP', () => {
    const trades = [];
    const cumulative = {};
    const preview = { atpsCollective: [{}] };

    const filename = mainFunction(trades, cumulative, preview);

    expect(filename).toBe('ATP-ABC123-20241118');
  });
});
