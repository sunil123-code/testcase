import { useEffect, useCallback } from 'react';
import { Card, Button } from 'uds-core';
import { connect, useDispatch } from 'react-redux';
import PropTypes from 'prop-types';

import Accordion from '../../components/Accordion';
import { cummulativeSelector } from '../../selectors/cummulativeSelector';
import {

  AccordionTitle,
} from '../../style/common.styles';

import { getURL } from '../../common/utils/actionHelper';
import { API_NAME } from '../../common/constants/constants'; // Ensure you import other necessary constants
import endpoints from '../../apis/endpoints';
import { onDownloadeAtp } from '../../actions/previewPage/creators';
import MultiAccordion from '../../components/MultiAccordion';
import PurposeForm from './purposeForm/view';
import SupportForm from './supportForm/view';
import FxDetails from './fxDetails/view';
import FxDisposition from './fxDisposition/view';
import IntendedBeneficiary from './intendedBeneficiary/view';
import { PreviewHeading } from './style';
import { previewPageDataSelector } from '../../selectors/previewPage';

// New method for generating filename
export const generateFilename = (index, referenceNumber) => {
  const now = new Date();
  const timestamp =
    `${now.getFullYear()}${(`0${now.getMonth() + 1}`).slice(-2)}${(`0${now.getDate()}`).slice(-2)}${(`0${now.getHours()}`).slice(-2)}${(`0${now.getMinutes()}`).slice(-2)}`;

  const filenameReferenceNumber = preview?.atpTradeList?.[0].opicsId ?? trades?.[0]?.opicsId;

  let filename = '';

  if (trades.length === 1 && cumulative?.atps?.length > 1) {
    filename = `ATP-${filenameReferenceNumber}-1-${timestamp}`;
  } else if (trades.length === 1 && cumulative?.atps?.length === 1) {
    filename = `ATP-${filenameReferenceNumber}-${timestamp}`;
  } else if (trades.length > 1 && cumulative?.atps?.length === 1) {
    filename = `ATP-MultiFX-${timestamp}`;
  }

  if (preview?.atpsCollective?.length > 1) {
    filename = `ATP-${filenameReferenceNumber}-1-${timestamp}`;
  } else if (preview?.atpsCollective?.length === 1) {
    filename = `ATP-${filenameReferenceNumber}-${timestamp}`;
  }

  return `ATP-${referenceNumber}-${index}-${timestamp}`;
};

const preparePayload = (data) => {
  const convertEmptyToNull = (obj) => {
    const newObj = Array.isArray(obj) ? [] : {}; // Maintain array structure if obj is an array
    Object.keys(obj).forEach(key => {
      if (obj[key] === '') {
        newObj[key] = null;
      } else if (typeof obj[key] === 'object' && obj[key] !== null) {
        newObj[key] = convertEmptyToNull(obj[key]); // Recursively process nested objects
      } else {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  };

  return convertEmptyToNull(data);
};

const handleDownloadATP = (configuration, trades, cumulative, preview, dispatch) => {
  const atpData = cumulative?.atps || [];

  if (!atpData.length) return;

  atpData.forEach((atp, index) => {
    // Use the new generateFilename method
    const filename = generateFilename(index + 1, atp.details.companyName);

 

  let atpTradeList = [];
  let totalAtps = 0;
  let atp = {};

  // If preview data exists, use that instead
  if (cumulative?.atps?.[0]?.details?.companyName) {
    atpTradeList = trades; // Cumulative ATP trade list
  } else {
    atpTradeList = preview.tradesCollective; // Take only the first object for preview
  }

  if (cumulative?.atps?.[0]?.details?.companyName) {
    atp = cumulative.atps[0]; // Cumulative ATP list
    totalAtps = cumulative.atps.length;
  } else {
    atp = typeof label === 'object' ? preview?.atpsCollective?.[0] : preview?.atpsCollective.filter(item => item.name === label)[0];
    totalAtps = preview?.atpsCollective?.length;
  }

  // Format the data to be sent in JSON, excluding supportingDocs and taking only the first object
  const atpData = {
      trades: trades.map(trade => ({ opicsId: trade.opicsId })),
    totalNoOfAtps: totalAtps,
    atps: [{
	 ...atp,
        name: `ATP ${index + 1}`,
      // If cumulative data has a companyName, set atpID to null; otherwise use atpID from Preview Data
      atpId: cumulative?.atps?.[0]?.details?.companyName ? null : atp?.atpId,
      referenceDocId: atp?.referenceDocId || null,
      name: atp?.name || 'ATP 1',

      details: {
        ...atp?.details,
        contactInfo: atp?.details?.contactInfo // Ensure contactInfo is used
      },
      purpose: {
        ...atp?.purpose,
        principle: atp?.purpose?.principle, // Ensure principal is used
      },

      fxDisposition: {
        ...atp?.fxDisposition,
        eventualRemittance: atp?.fxDisposition?.eventualRemittance, // Ensure eventualRemittance is used
      },
      intendedBeneficiary: atp?.intendedBeneficiary,
    }],
  };

  delete atpData.atps[0]?.details?.sumOfBuyAmounts;
  delete atpData.atps[0]?.supportingDocs;

  // Convert empty strings to null in the payload
  const processedPayload = preparePayload(atpData);

  // Generate the download URL
  const url = getURL(configuration, API_NAME.DOWNLOADATP, endpoints);

  // Dispatch the processed payload with the constructed filename
  dispatch(onDownloadeAtp(configuration, filename, processedPayload, url));
};

export const handleSelectedSections = (sections, previewPageActions, trades) => {
  if (trades.length === 1) {
    previewPageActions.onAccordionSelect(0);
  } else {
    previewPageActions.onAccordionSelect(sections[0]);
  }
};

const getSingleAtpSections = (ATP) => {
  return (
    <div style={{ padding: '0px 20px' }}>
      <FxDetails details={ATP?.details} />
      <PurposeForm atps={ATP?.purpose} details={ATP?.details} />
      <FxDisposition fxDisposition={ATP?.fxDisposition} />
      <IntendedBeneficiary intendedBeneficiary={ATP?.intendedBeneficiary} />
      <SupportForm supportingDocs={ATP?.supportingDocs} />
    </div>
  );
};

const CardView = ({ trades, previewPageActions, apiConfiguration, preview,
  cummulative }) => {
  const dispatch = useDispatch();

  const selectedATPS = preview.previewRoutedFrom === 'ATP-Page' ? cummulative?.atps : preview?.atpsCollective;
  useEffect(() => {
    if (trades.length === 1) {
      previewPageActions.onAccordionSelect(0);
    } else {
      previewPageActions.onAccordionSelect('');
    }
    return () => {
      previewPageActions.onAccordionSelect(0);
    };
  }, [trades.length, previewPageActions]);

  const handleDownloadAtpCallBack = useCallback((label) => {
   handleDownloadATP(apiConfiguration, trades, cumulative, preview, dispatch);
  }, [apiConfiguration, trades, cumulative, dispatch]);


  const header1 = {
    cardNumber: 1,
    title: <PreviewHeading>Transaction Details</PreviewHeading>,
  };

  const header2 = {
    cardNumber: 2,
    title: (
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
        <div><PreviewHeading>Purchase Application</PreviewHeading></div>
        <div>
          <Button
            data-testid="button-submit"
            variant="small"
            buttonType="link"
            onClick={handleDownloadAtpCallBack}
            leftIconName="ic_download"
          >
            Download ATP
          </Button>
        </div>
      </div>
    ),
  };

  const isSingleOpen = true;

  const icons = { close: 'ic_chevron_down', open: 'ic_chevron_right' };
  
  
  useEffect(() => {
    previewPageActions.onAccordionSelect(0);
    return () => {
      previewPageActions.onAccordionSelect(0);
    };
  }, [previewPageActions]);

  return (
    <>
      <Card header={header1}>

        <AccordionTitle>
          <Accordion
            isSingleOpen={isSingleOpen}
            icons={icons}
             handleSelectedSections={(sections) => previewPageActions.onAccordionSelect(sections[0])}
            defaultCheckedSections={[0]}
            trades={trades}
            label="ATP1"
          />
        </AccordionTitle>
      </Card>

      <div style={{ marginTop: '-50px' }}>
        <Card header={header2}>
          {preview?.atpsCollective?.length > 1 ?
            <div style={{ padding: '0px 20px' }}>
              <MultiAccordion
                isSingleOpen={isSingleOpen}
                icons={icons}
                handleSelectedSections={(sections) => previewPageActions.onAccordionSelect(sections)}
                defaultCheckedSections={[0]}
                getSingleATPSections={(ATP) => (
                  <div style={{ padding: '0px 20px' }}>
                    <FxDetails details={ATP?.details} />
                    <PurposeForm atps={ATP?.purpose} details={ATP?.details} />
                    <FxDisposition fxDisposition={ATP?.fxDisposition} />
                    <IntendedBeneficiary intendedBeneficiary={ATP?.intendedBeneficiary} />
                    <SupportForm supportingDocs={ATP?.supportingDocs} />
                  </div>
                )}
                handleDownloadAtpCallBack={handleDownloadAtpCallBack}
              />

              {/* </MultiAccordion> */}
            </div>
            : (
              <div style={{ padding: '0px 20px' }}>
                <FxDetails details={preview?.atpsCollective[0]?.details} />
                <PurposeForm atps={preview?.atpsCollective[0]?.purpose} details={preview?.atpsCollective[0]?.details} />
                <FxDisposition fxDisposition={preview?.atpsCollective[0]?.fxDisposition} />
                <IntendedBeneficiary intendedBeneficiary={preview?.atpsCollective[0]?.intendedBeneficiary} />
                <SupportForm supportingDocs={preview?.atpsCollective[0]?.supportingDocs} />
              </div>
            )}
          
        </Card>
      </div>
    </>
  );
};

const mapStateToProps = (state) => ({
  cummulative: cummulativeSelector(state),
  preview: previewPageDataSelector(state)
});

CardView.propTypes = {
  trades: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    opicsId: PropTypes.string.isRequired, // Ensure opicsId is required
  })).isRequired,
  previewPageActions: PropTypes.shape({
    onAccordionSelect: PropTypes.func.isRequired,
  }).isRequired,
  preview: PropTypes.shape({
    previewRoutedFrom: PropTypes.string,
    atpsCollective: PropTypes.arrayOf(PropTypes.shape({}))
  }),
  cummulative: PropTypes.shape({
    atps: PropTypes.arrayOf(PropTypes.shape([{}]))
  }),
  apiConfiguration: PropTypes.shape({})
};

export default connect(mapStateToProps)(CardView);

