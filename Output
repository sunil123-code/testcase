export const handleDownloadATP = (configuration, trades, cumulative, preview, label, dispatch) => {
  if (!trades || trades.length === 0) {
    return;
  }

  const now = new Date();
  const timestamp = `${now.getFullYear()}${(`0${now.getMonth() + 1}`).slice(-2)}${(`0${now.getDate()}`).slice(-2)}${(`0${now.getHours()}`).slice(-2)}${(`0${now.getMinutes()}`).slice(-2)}`;

  const filenameReferenceNumber = preview?.atpTradeList?.[0]?.opicsId ?? trades?.[0]?.opicsId;
  const multiFxFileName = trades?.length > 1 ? `ATP-MultiFX-${timestamp}` : `ATP-${trades[0].opicsId}-${timestamp}`;
  const filename = preview?.atpsCollective?.length > 1 ? `ATP-${filenameReferenceNumber}-1-${timestamp}` : multiFxFileName;

  let atpTradeList = [];
  let totalAtps = 0;
  let atp = {};

  if (cumulative?.atps?.[0]?.details?.companyName) {
    atpTradeList = trades;
  } else {
    atpTradeList = preview.tradesCollective;
  }

  if (cumulative?.atps?.[0]?.details?.companyName) {
    atp = cumulative.atps[0];
    totalAtps = cumulative.atps.length;
  } else {
    atp = typeof label === 'object' ? preview?.atpsCollective?.[0] : preview?.atpsCollective?.find(item => item.name === label);
    totalAtps = preview?.atpsCollective?.length;
  }

  const assignNullIfEmpty = (value) => (value === undefined || value === null || value === "" ? null : value);

  const atpData = {
    trades: atpTradeList.map(trade => ({ opicsId: trade.opicsId })),
    totalNoOfAtps: totalAtps,
    atps: [{
      atpId: assignNullIfEmpty(cumulative?.atps?.[0]?.details?.companyName ? null : atp?.atpId),
      referenceDocId: assignNullIfEmpty(atp?.referenceDocId),
      name: assignNullIfEmpty(atp?.name) || 'ATP 1',
      details: {
        companyName: assignNullIfEmpty(atp?.details?.companyName),
        fxToBePurchased: assignNullIfEmpty(atp?.details?.fxToBePurchased),
        fxToBePurchasedCurrency: assignNullIfEmpty(atp?.details?.fxToBePurchasedCurrency),
        address: assignNullIfEmpty(atp?.details?.address),
        contactInfo: assignNullIfEmpty(atp?.details?.contactInfo),
        taxIdentificationNo: assignNullIfEmpty(atp?.details?.taxIdentificationNo),
        governmentId: assignNullIfEmpty(atp?.details?.governmentId),
        residency: assignNullIfEmpty(atp?.details?.residency),
        buyAmount: assignNullIfEmpty(atp?.details?.buyAmount),
        buyCurrency: assignNullIfEmpty(atp?.details?.buyCurrency)
      },
      purpose: {
        purposeCategory: assignNullIfEmpty(atp?.purpose?.purposeCategory),
        totalFXPurchased: assignNullIfEmpty(atp?.purpose?.totalFXPurchased),
        debtAccount: assignNullIfEmpty(atp?.purpose?.debtAccount),
        purpose: assignNullIfEmpty(atp?.purpose?.purpose),
        paymentType: assignNullIfEmpty(atp?.purpose?.paymentType),
        principle: assignNullIfEmpty(atp?.purpose?.principle),
        interest: assignNullIfEmpty(atp?.purpose?.interest),
        fees: assignNullIfEmpty(atp?.purpose?.fees),
        securityType: assignNullIfEmpty(atp?.purpose?.securityType),
        specifiedReason: assignNullIfEmpty(atp?.purpose?.specifiedReason)
      },
      fxDisposition: {
        type: assignNullIfEmpty(atp?.fxDisposition?.type),
        accountOwner: assignNullIfEmpty(atp?.fxDisposition?.accountOwner),
        accountNo: assignNullIfEmpty(atp?.fxDisposition?.accountNo),
        depository: assignNullIfEmpty(atp?.fxDisposition?.depository),
        eventualRemittance: assignNullIfEmpty(atp?.fxDisposition?.eventualRemittance)
      },
      intendedBeneficiary: {
        name: assignNullIfEmpty(atp?.intendedBeneficiary?.name),
        address: assignNullIfEmpty(atp?.intendedBeneficiary?.address)
      }
    }],
  };

  delete atpData.atps[0]?.details?.sumOfBuyAmounts;
  delete atpData.atps[0]?.supportingDocs;

  const url = getURL(configuration, API_NAME.DOWNLOADATP, endpoints);

  dispatch(onDownloadeAtp(configuration, filename, atpData, url));
};
