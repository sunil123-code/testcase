export const handleDownloadATP = (configuration, trades, cumulative, preview, label, dispatch) => {
  if (!trades || trades.length === 0) {
    console.error("No trades available to process ATP download.");
    return;
  }

  // Use the generateFilename method
  const filename = generateFilename(trades, cumulative, preview);

  let atpData = {};

  // If cumulative data exists and is triggered, send the full cumulative data
  if (cumulative?.atps?.length > 0) {
    atpData = {
      trades: trades.map(trade => ({ opicsId: trade.opicsId })),
      totalNoOfAtps: cumulative.atps.length,
      atps: cumulative.atps.map(atp => ({
        atpId: atp?.details?.atpId || null,
        referenceDocId: atp?.referenceDocId || null,
        name: atp?.name || 'ATP',
        details: { ...atp.details },
        purpose: { ...atp.purpose },
        fxDisposition: { ...atp.fxDisposition },
        intendedBeneficiary: { ...atp.intendedBeneficiary },
      })),
    };
  } else if (preview?.atpsCollective?.length > 0) {
    // Use preview data as fallback
    const atp = typeof label === 'object' 
      ? preview?.atpsCollective?.[0] 
      : preview?.atpsCollective.find(item => item.name === label);

    atpData = {
      trades: trades.map(trade => ({ opicsId: trade.opicsId })),
      totalNoOfAtps: preview?.atpsCollective?.length || 0,
      atps: [{
        atpId: atp?.atpId,
        referenceDocId: atp?.referenceDocId || null,
        name: atp?.name || 'ATP 1',
        details: { ...atp?.details },
        purpose: { ...atp?.purpose },
        fxDisposition: { ...atp?.fxDisposition },
        intendedBeneficiary: atp?.intendedBeneficiary,
      }],
    };
  } else {
    console.error("No ATP data available for download.");
    return;
  }

  // Remove unwanted fields and convert empty values to null
  atpData.atps.forEach(atp => {
    delete atp.details?.sumOfBuyAmounts;
    delete atp.supportingDocs;
  });

  const processedPayload = preparePayload(atpData);

  // Generate the download URL
  const url = getURL(configuration, API_NAME.DOWNLOADATP, endpoints);

  // Dispatch the download action
  dispatch(onDownloadeAtp(configuration, filename, processedPayload, url));
};
=============================



const handleDownloadAtpCallBack = useCallback((label) => {
  handleDownloadATP(apiConfiguration, trades, cummulative, preview, label, dispatch);
}, [apiConfiguration, trades, cummulative, preview, dispatch]);


======================

const handleDownloadATPCallback = (e, label) => {
  e.stopPropagation();
  handleDownloadAtpCallBack(label);
};
