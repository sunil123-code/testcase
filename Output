

// Helper function to convert empty strings to null in an object
const preparePayload = (data) => {
  const convertEmptyToNull = (obj) => {
    if (typeof obj === 'object' && obj !== null) {
      Object.keys(obj).forEach(key => {
        if (obj[key] === '') {
          obj[key] = null;
        } else if (typeof obj[key] === 'object') {
          convertEmptyToNull(obj[key]); // Recursively handle nested objects
        }
      });
    }
    return obj;
  };
  
  return convertEmptyToNull(data);
};

export const handleDownloadATP = (configuration, trades, cumulative, preview, label, dispatch) => {
  if (!trades || trades.length === 0) {
    return;
  }

  const now = new Date();
  const timestamp = `${now.getFullYear()}${(`0${now.getMonth() + 1}`).slice(-2)}${(`0${now.getDate()}`).slice(-2)}${(`0${now.getHours()}`).slice(-2)}${(`0${now.getMinutes()}`).slice(-2)}`;

  const filenameReferenceNumber = preview?.atpTradeList?.[0].opicsId ?? trades?.[0]?.opicsId;
  const multiFxFileName = trades?.length > 1 ? `ATP-MultiFX-${timestamp}` : `ATP-${trades[0].opicsId}-${timestamp}`;
  const filename = preview?.atpsCollective?.length > 1 ? `ATP-${filenameReferenceNumber}-1-${timestamp}` : multiFxFileName;

  let atpTradeList = [];
  let totalAtps = 0;
  let atp = {};

  if (cumulative?.atps?.[0]?.details?.companyName) {
    atpTradeList = trades;
  } else {
    atpTradeList = preview.tradesCollective;
  }

  if (cumulative?.atps?.[0]?.details?.companyName) {
    atp = cumulative.atps[0];
    totalAtps = cumulative.atps.length;
  } else {
    atp = typeof label === 'object' ? preview?.atpsCollective?.[0] : preview?.atpsCollective.filter(item => item.name === label)[0];
    totalAtps = preview?.atpsCollective?.length;
  }

  // Construct the ATP data payload
  const atpData = {
    trades: atpTradeList.map(trade => ({ opicsId: trade.opicsId })),
    totalNoOfAtps: totalAtps,
    atps: [{
      atpId: cumulative?.atps?.[0]?.details?.companyName ? null : atp?.atpId,
      referenceDocId: atp?.referenceDocId || null,
      name: atp?.name || 'ATP 1',
      details: {
        ...atp?.details,
        contactInfo: atp?.details?.contactInfo,
      },
      purpose: {
        ...atp?.purpose,
        principle: atp?.purpose?.principle,
      },
      fxDisposition: {
        ...atp?.fxDisposition,
        eventualRemittance: atp?.fxDisposition?.eventualRemittance,
      },
      intendedBeneficiary: atp?.intendedBeneficiary,
    }],
  };

  delete atpData.atps[0]?.details?.sumOfBuyAmounts;
  delete atpData.atps[0]?.supportingDocs;

  // Convert empty strings to null in the payload
  const processedPayload = preparePayload(atpData);

  // Generate the download URL
  const url = getURL(configuration, API_NAME.DOWNLOADATP, endpoints);

  // Dispatch the processed payload
  dispatch(onDownloadeAtp(configuration, filename, processedPayload, url));
};
