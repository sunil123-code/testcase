
it('purposeselectedHandler onchange event Handler', async () => {
  const purposeprops = {
    ...props,
    ATPFlags: {
      ATPFormPageFlags: {
        isDebt: true, isTotalFX: false, ispurposeEnable: true, ispaymenttypes: true,
        issecuritytypes: false, isEnablePrincipalCol: false, isSpecify: false, isSpecifyTooltip: false,
      },
    },
    formDetails: {
      ...props.formDetails,
      purposeData: [
        {
          'id': 20891, 'categoryId': 20883,
          'name': 'Owed to Offshore Banking Units in the Philippines', 'type': 'PURPOSE'
        },
      ],
      paymentTypesData: [
        {
          'id': 20919, 'purposeId': 20891,
          'name': 'Prepayment', 'type': 'PAYMENT_TYPE'
        },
      ]
    },
    ATPFormDetails: {
      debtAccount: 'test', fees: '', interest: '', paymentType: 'Prepayment',
      principle: '', purpose: 'Owed to Offshore Banking Units in the Philippines',
      purposeCategory: 'Foreign loans /borrowings', securityType: '',
      specifiedReason: '', totalFXPurchased: '',
    },
    purposeCategories: {
      ...props.purposeCategories,
      purposeCategories: [
        {
          'id': 20883,
          'name': 'Foreign loans /borrowings'
        }
      ],
      purposes: [
        {
          'id': 20891, 'categoryId': 20883,
          'name': 'Owed to Offshore Banking Units in the Philippines', 'type': 'PURPOSE'
        },
      ],
      payments: [
        {
          'id': 20919, 'purposeId': 20891,
          'name': 'Prepayment', 'type': 'PAYMENT_TYPE'
        },
      ]
    }
  };

  const { container, getAllByTestId, rerender } = render(
    <HashRouter>
      <Provider store={mockStore(state)}>
        <ATPFormPage {...purposeprops} />
      </Provider>
    </HashRouter>
  );

  fireEvent.focus(getAllByTestId('input')[0]);
  fireEvent.mouseDown(container.querySelectorAll('[name="test_menuitem"]')[0]);

  // Rerender and check if paymentTypes is rendered
  rerender(
    <HashRouter>
      <Provider store={mockStore(state)}>
        <ATPFormPage {...purposeprops} />
      </Provider>
    </HashRouter>
  );
  
  await waitFor(() => {
    expect(container.querySelector('[data-testid="paymentTypes"]')).toBeInTheDocument();
  });

  // Simulate further selection and test state update
  fireEvent.focus(getAllByTestId('input')[2]);
  fireEvent.mouseDown(container.querySelectorAll('[name="test_menuitem"]')[0]);

  rerender(
    <HashRouter>
      <Provider store={mockStore(state)}>
        <ATPFormPage {...purposeprops} />
      </Provider>
    </HashRouter>
  );

  await waitFor(() => {
    expect(container.querySelector('[data-testid="paymentTypes"]')).toBeInTheDocument();
  });

  // Optionally: Check that the `ATPFormDetails` state was updated correctly
  expect(purposeprops.ATPFormDetails.paymentType).toBe('Prepayment');
});
