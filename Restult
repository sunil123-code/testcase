import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import ATPFormPage from '../atpFormPage';

const mockStore = configureStore([]);

describe('<ATPFormPage />', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      ATPFlags: {
        ATPFormPageFlags: {
          isDebt: false,
          isTotalFX: false,
          ispurposeEnable: false,
          ispaymenttypes: false,
          issecuritytypes: false,
          isEnablePrincipalCol: false,
          isSpecify: false,
          isSpecifyTooltip: false,
        }
      },
      ATPFormDetails: {
        purposeCategory: '',
        totalFXPurchased: '',
        debtAccount: '',
        purpose: '',
        paymentType: '',
        principle: '',
        interest: '',
        fees: '',
        securityType: '',
        specifiedReason: ''
      },
      formFieldErrorIds: [],
      formDetails: {
        purposeData: [],
        paymentTypesData: [],
        securityTypesData: []
      },
      fxPurchased: {},
      selectedTab: 0,
      purposeCategories: {
        purposeCategories: [],
        purposes: [],
        payments: [],
        paymentComponents: []
      }
    });
  });

  it('updates the purpose and displays the appropriate fields when selected', () => {
    const { getByTestId } = render(
      <Provider store={store}>
        <ATPFormPage />
      </Provider>
    );

    const purposeCategorySelect = getByTestId('purposeCategory');
    fireEvent.change(purposeCategorySelect, { target: { value: 'Foreign loans /borrowings' } });

    const purposeSelect = getByTestId('purpose');
    fireEvent.change(purposeSelect, { target: { value: 'Owed to Offshore Banking Units in the Philippines' } });

    expect(store.getActions()).toContainEqual(/* expected action for updating purpose */);
    expect(getByTestId('paymentType')).toBeInTheDocument();
    expect(getByTestId('securityType')).not.toBeInTheDocument();
    expect(getByTestId('specifiedReason')).not.toBeInTheDocument();
    expect(getByTestId('principal')).not.toBeInTheDocument();
    expect(getByTestId('interest')).not.toBeInTheDocument();
    expect(getByTestId('fees')).not.toBeInTheDocument();
  });

  // Add more tests for other functionality
});
