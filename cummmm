import { Accordion, Button } from 'uds-core';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { cummulativeSelector } from '../../selectors/cummulativeSelector';
import { previewPageDataSelector } from '../../selectors/previewPage';
import { AccordionRow, AccordionCol, AccordionTitle, MultiAtpLabelStyle } from '../../style/common.styles';

const MultiAccordion = ({
  isSingleOpen,
  icons,
  handleSelectedSections,
  cummulative,
  preview,
  getSingleATPSections,
  handleDownloadAtpCallBack,
}) => {
  // Determine which ATPs to display based on the route or page context
  const selectedATPS = preview.previewRoutedFrom === 'ATP-Page' ? cummulative?.atps : preview?.atpsCollective;

  // Render ATP details section for each ATP
  const callEachAtp = (atp) => getSingleATPSections(atp);

  // Handle download button click
  const handleDownloadATPCallback = (e, atp) => {
    e.stopPropagation();
    // Call the provided callback and pass the relevant ATP data (here we use 'atp.name' or 'atp.id')
    handleDownloadAtpCallBack(atp); // Pass the entire ATP object or only necessary fields
  };

  // Render the label and download button for each ATP
  const multiAtpLabel = (atp) => {
    return (
      <AccordionRow style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <AccordionCol style={{ flex: '1', textAlign: 'left' }}>
          <span>{atp.name}</span> {/* Display the ATP name */}
        </AccordionCol>
        <AccordionCol style={{ flex: '0', textAlign: 'right' }}>
          <Button
            data-testid="button-submit"
            variant="small"
            buttonType="link"
            onClick={(e) => handleDownloadATPCallback(e, atp)} // Pass the ATP object when clicking
            leftIconName="ic_download"
          >
            Download ATP
          </Button>
        </AccordionCol>
      </AccordionRow>
    );
  };

  return (
    <MultiAtpLabelStyle>
      <Accordion
        theme="blue"
        variant="contained"
        iconPosition="left"
        isSingleOpen={isSingleOpen}
        icons={icons}
        selectedSections={handleSelectedSections}
        defaultCheckedSections={[0]}
      >
        {selectedATPS ? (
          selectedATPS.map((atp) => (
            <AccordionTitle key={atp.name} label={multiAtpLabel(atp)}>
              {callEachAtp(atp)}
            </AccordionTitle>
          ))
        ) : (
          ''
        )}
      </Accordion>
    </MultiAtpLabelStyle>
  );
};

const mapStateToProps = (state) => ({
  cummulative: cummulativeSelector(state),
  preview: previewPageDataSelector(state),
});

MultiAccordion.propTypes = {
  cummulative: PropTypes.shape({
    atps: PropTypes.arrayOf(PropTypes.shape([{}])),
  }),
  preview: PropTypes.shape({
    previewRoutedFrom: PropTypes.string,
    atpsCollective: PropTypes.arrayOf(PropTypes.shape({})),
  }),
  icons: PropTypes.bool,
  isSingleOpen: PropTypes.bool,
  handleSelectedSections: PropTypes.func,
  getSingleATPSections: PropTypes.func,
  handleDownloadAtpCallBack: PropTypes.func.isRequired, // Ensure callback is required
};

export default connect(mapStateToProps)(MultiAccordion);
