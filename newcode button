import React, { useCallback, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import Button from 'your-button-component'; // Import your Button component
import Card from 'your-card-component'; // Import your Card component
import Accordion from 'your-accordion-component'; // Import your Accordion component
import MultiAccordion from 'your-multi-accordion-component'; // Import your MultiAccordion component
import { handleDownloadATP } from 'path-to-your-action-creators'; // Import the handleDownloadATP action creator

const IndexPage = ({ trades, preview, cumulative, apiConfiguration, previewPageActions }) => {
  const dispatch = useDispatch();

  // Handle ATP download when the button is clicked
  const handleDownloadAtpCallBack = useCallback((atpName) => {
    handleDownloadATP(apiConfiguration, trades, cumulative, preview, atpName, dispatch);
  }, [apiConfiguration, trades, cumulative, preview, dispatch]);

  const selectedATPS = preview.previewRoutedFrom === 'ATP-Page' ? cumulative?.atps : preview?.atpsCollective;

  const header1 = {
    cardNumber: 1,
    title: <PreviewHeading>Transaction Details</PreviewHeading>,
  };

  const header2 = {
    cardNumber: 2,
    title: (
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
        <div><PreviewHeading>Purchase Application</PreviewHeading></div>
        {
          selectedATPS?.length <= 1 && (
            <div>
              <Button
                data-testid="button-submit"
                variant="small"
                buttonType="link"
                onClick={() => handleDownloadAtpCallBack('ATP 1')} // Example for 'ATP 1'
                leftIconName="ic_download"
              >
                Download ATP
              </Button>
            </div>
          )
        }
      </div>
    ),
  };

  const isSingleOpen = true;
  const icons = { close: 'ic_chevron_down', open: 'ic_chevron_right' };

  return (
    <>
      <Card header={header1}>
        <Accordion
          isSingleOpen={isSingleOpen}
          icons={icons}
          handleSelectedSections={(sections) => handleSelectedSections(sections, previewPageActions, trades)}
          defaultCheckedSections={[0]}
          trades={trades}
          label="ATP1"
        />
      </Card>

      <div style={{ marginTop: '-50px' }}>
        <Card header={header2}>
          {selectedATPS?.length > 1 ? (
            <div style={{ padding: '0px 20px' }}>
              <MultiAccordion
                isSingleOpen={isSingleOpen}
                icons={icons}
                handleSelectedSections={(sections) => handleSelectedSections(sections, previewPageActions, trades)}
                getSingleATPSections={(ATP) => (
                  <div style={{ padding: '0px 20px' }}>
                    <FxDetails details={ATP?.details} />
                    <PurposeForm atps={ATP?.purpose} details={ATP?.details} />
                    <FxDisposition fxDisposition={ATP?.fxDisposition} />
                    <IntendedBeneficiary intendedBeneficiary={ATP?.intendedBeneficiary} />
                    <SupportForm supportingDocs={ATP?.supportingDocs} />
                  </div>
                )}
                handleDownloadAtpCallBack={handleDownloadAtpCallBack}
              />
            </div>
          ) : (
            // If there's only one ATP, show it without the multi-accordion
            selectedATPS?.map((atp) => (
              <div key={atp.name} style={{ padding: '0px 20px' }}>
                <FxDetails details={atp?.details} />
                <PurposeForm atps={atp?.purpose} details={atp?.details} />
                <FxDisposition fxDisposition={atp?.fxDisposition} />
                <IntendedBeneficiary intendedBeneficiary={atp?.intendedBeneficiary} />
                <SupportForm supportingDocs={atp?.supportingDocs} />
                <Button
                  data-testid={`button-submit-${atp.name}`}
                  variant="small"
                  buttonType="link"
                  onClick={() => handleDownloadAtpCallBack(atp.name)} // Pass dynamic ATP name
                  leftIconName="ic_download"
                >
                  Download {atp.name}
                </Button>
              </div>
            ))
          )}
        </Card>
      </div>
    </>
  );
};

export default IndexPage;
