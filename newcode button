import { Accordion, Button } from 'uds-core';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { cummulativeSelector } from '../../selectors/cummulativeSelector';
import { previewPageDataSelector } from '../../selectors/previewPage';
import { AccordionRow, AccordionCol, AccordionTitle, MultiAtpLabelStyle } from '../../style/common.styles';

const MultiAccordion = ({ isSingleOpen, icons, handleSelectedSections, cummulative, preview, getSingleATPSections, handleDownloadAtpCallBack }) => {
  const selectedATPS = preview.previewRoutedFrom === 'ATP-Page' ? cummulative?.atps : preview?.atpsCollective;

  const callEachAtp = (atp) => getSingleATPSections(atp);

  const handleDownloadATPCallback = (e, atp) => {
    e.stopPropagation();
    // Pass the ATP object or its necessary fields
    handleDownloadAtpCallBack(atp);
  };

  const multiAtpLabel = (atp) => {
    return (
      <AccordionRow style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <AccordionCol style={{ flex: '1', textAlign: 'left' }}>
          <span>{atp.name}</span> {/* Display the ATP name */}
        </AccordionCol>
        <AccordionCol style={{ flex: '0', textAlign: 'right' }}>
          <Button
            data-testid="button-submit"
            variant="small"
            buttonType="link"
            onClick={(e) => handleDownloadATPCallback(e, atp)} // Pass the ATP object on click
            leftIconName="ic_download"
          >
            Download ATP
          </Button>
        </AccordionCol>
      </AccordionRow>
    );
  };

  return (
    <MultiAtpLabelStyle>
      <Accordion
        theme="blue"
        variant="contained"
        iconPosition="left"
        isSingleOpen={isSingleOpen}
        icons={icons}
        selectedSections={handleSelectedSections}
        defaultCheckedSections={[0]}
      >
        {selectedATPS ? (
          selectedATPS.map((atp) => (
            <AccordionTitle key={atp.name} label={multiAtpLabel(atp)}>
              {callEachAtp(atp)}
            </AccordionTitle>
          ))
        ) : (
          ''
        )}
      </Accordion>
    </MultiAtpLabelStyle>
  );
};

const mapStateToProps = (state) => ({
  cummulative: cummulativeSelector(state),
  preview: previewPageDataSelector(state),
});

MultiAccordion.propTypes = {
  cummulative: PropTypes.shape({
    atps: PropTypes.arrayOf(PropTypes.shape([{}])),
  }),
  preview: PropTypes.shape({
    previewRoutedFrom: PropTypes.string,
    atpsCollective: PropTypes.arrayOf(PropTypes.shape({})),
  }),
  icons: PropTypes.bool,
  isSingleOpen: PropTypes.bool,
  handleSelectedSections: PropTypes.func,
  getSingleATPSections: PropTypes.func,
  handleDownloadAtpCallBack: PropTypes.func.isRequired, // Ensure callback is required
};

export default connect(mapStateToProps)(MultiAccordion);
==========================


export const handleDownloadATP = (configuration, trades, cumulative, preview, label, dispatch) => {
  if (!trades || trades.length === 0) {
    console.error("No trades available to process ATP download.");
    return;
  }

  const filename = generateFilename(trades, cumulative, preview);

  let atpData = {};

  if (cumulative?.atps?.length > 0) {
    // Use cumulative ATP data
    atpData = {
      trades: trades.map((trade) => ({ opicsId: trade.opicsId })),
      totalNoOfAtps: cumulative.atps.length,
      atps: cumulative.atps.map((atp) => ({
        atpId: atp?.details?.atpId || null,
        referenceDocId: atp?.referenceDocId || null,
        name: atp?.name || 'ATP',
        details: { ...atp.details },
        purpose: { ...atp.purpose },
        fxDisposition: { ...atp.fxDisposition },
        intendedBeneficiary: { ...atp.intendedBeneficiary },
      })),
    };
  } else if (preview?.atpsCollective?.length > 0) {
    // Use preview data as fallback
    const atp = typeof label === 'object' 
      ? preview?.atpsCollective?.[0] 
      : preview?.atpsCollective.find((item) => item.name === label);

    atpData = {
      trades: trades.map((trade) => ({ opicsId: trade.opicsId })),
      totalNoOfAtps: preview?.atpsCollective?.length || 0,
      atps: [{
        atpId: atp?.atpId,
        referenceDocId: atp?.referenceDocId || null,
        name: atp?.name || 'ATP 1',
        details: { ...atp?.details },
        purpose: { ...atp?.purpose },
        fxDisposition: { ...atp?.fxDisposition },
        intendedBeneficiary: atp?.intendedBeneficiary,
      }],
    };
  } else {
    console.error("No ATP data available for download.");
    return;
  }

  // Remove unnecessary fields before processing
  atpData.atps.forEach((atp) => {
    delete atp.details?.sumOfBuyAmounts;
    delete atp.supportingDocs;
  });

  // Convert empty strings to null in the payload
  const processedPayload = preparePayload(atpData);

  const url = getURL(configuration, API_NAME.DOWNLOADATP, endpoints);

  // Dispatch the payload with the constructed filename
  dispatch(onDownloadeAtp(configuration, filename, processedPayload, url));
};
