

export const handleDownloadATP = (configuration, trades, cumulative, preview, label, dispatch) => {
  if (!trades || trades.length === 0) {
    console.error("No trades available for ATP download.");
    return;
  }

  // Generate the filename
  const filename = generateFilename(trades, cumulative, preview);

  let atpData = {};
  let matchedAtps = [];

  // Handle case for a single ATP in cumulative
  if (cumulative?.atps?.length === 1) {
    matchedAtps = cumulative.atps;
  } else if (cumulative?.atps?.length > 1 && typeof label === 'string') {
    const matchedAtp = cumulative.atps.find(atp => atp?.name === label);
    if (matchedAtp) {
      matchedAtps = [matchedAtp];
    } else {
      console.error("No matching ATP found in cumulative.atps for the given label.");
      return;
    }
  }

  // Build atpData
  if (matchedAtps.length > 0) {
    atpData = {
      trades: trades.map(trade => ({ opicsId: trade.opicsId })), // Map trades with opicsId
      totalNoOfAtps: matchedAtps.length,
      atps: matchedAtps.map(atp => ({
        atpId: atp?.details?.atpId || null,
        referenceDocId: atp?.referenceDocId || null,
        name: atp?.name || 'ATP', // Default to 'ATP'
        details: { ...atp?.details },
        purpose: { ...atp?.purpose },
        fxDisposition: { ...atp?.fxDisposition },
        intendedBeneficiary: { ...atp?.intendedBeneficiary },
      })),
    };
  } else if (preview?.atpsCollective?.length > 0) {
    // Fallback to preview data
    const atp = typeof label === 'object'
      ? preview?.atpsCollective?.[0]
      : preview?.atpsCollective.find(item => item.name === label);

    atpData = {
      trades: trades.map(trade => ({ opicsId: trade.opicsId })),
      totalNoOfAtps: preview?.atpsCollective?.length || 0,
      atps: [{
        atpId: atp?.atpId,
        referenceDocId: atp?.referenceDocId || null,
        name: atp?.name || 'ATP 1',
        details: { ...atp?.details },
        purpose: { ...atp?.purpose },
        fxDisposition: { ...atp?.fxDisposition },
        intendedBeneficiary: atp?.intendedBeneficiary,
      }],
    };
  } else {
    console.error("No ATP data available for download.");
    return;
  }

  // Remove unnecessary properties
  atpData.atps.forEach(atp => {
    delete atp.details?.sumOfBuyAmounts;
  });

  // Convert empty strings to null in the payload
  const processedPayload = preparePayload(atpData);

  // Generate the download URL
  const url = getURL(configuration, API_NAME.DOWNLOADATP, endpoints);

  // Dispatch the processed payload with the constructed filename
  dispatch(onDownloadeAtp(configuration, filename, processedPayload, url));
};
