

import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { cummulativeSelector } from '../../selectors/cummulativeSelector';
import { previewPageDataSelector } from '../../selectors/previewPage';
import { AccordionRow, AccordionCol, AccordionTitle, MultiAtpLabelStyle } from '../../style/common.styles';

// Utility to generate the filename with index always as 1
const generateFilename = (referenceNumber) => {
  const now = new Date();
  const yyyymmdd = now.toISOString().slice(0, 10).replace(/-/g, ''); // YYYYMMDD
  const tttt = now.toTimeString().slice(0, 5).replace(':', ''); // HHMM
  
  // Always set index as 1
  const index = 1;

  // Create the filename as "ATP-{referenceNumber}-{index}-{yyyymmddtttt}"
  return `ATP-${referenceNumber}-${index}-${yyyymmdd}${tttt}`;
};

const MultiAccordion = ({ isSingleOpen, icons, handleSelectedSections, cummulative, preview, getSingleATPSections, handleDownloadAtpCallBack }) => {
  const selectedLabels = preview.previewRoutedFrom === 'ATP-Page' ? cummulative?.atps : preview?.atpsCollective;

  const callEachLabel = (label) => (
    getSingleATPSections(label)
  );

  const handleDownloadATPCallback = (e, label) => {
    // Prevent event from propagating to parent elements
    e.stopPropagation();
    
    const referenceNumber = label.referenceNumber || 'Unknown'; // Fallback if no reference number exists
    const filename = generateFilename(referenceNumber); // Generate filename with index 1
    handleDownloadAtpCallBack(filename); // Pass the filename to the callback
  };

  const multiLabel = (label) => {
    return (
      <AccordionRow style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <AccordionCol style={{ flex: '1', textAlign: 'left' }}>
          <span>{label.name}</span>
        </AccordionCol>
        <AccordionCol style={{ flex: '0', textAlign: 'right' }}>
          <Button
            data-testid="button-submit"
            variant="small"
            buttonType="link"
            onClick={(e) => handleDownloadATPCallback(e, label)}
            leftIconName="ic_upload"
          >
            Download ATP
          </Button>
        </AccordionCol>
      </AccordionRow>
    );
  };

  return (
    <MultiAtpLabelStyle>
      <Accordion
        theme="blue"
        variant="contained"
        iconPosition="left"
        isSingleOpen={isSingleOpen}
        icons={icons}
        selectedSections={handleSelectedSections}
        defaultCheckedSections={[0]}
      >
        {selectedLabels ? selectedLabels.map(label =>
          <AccordionTitle key={label.name} label={multiLabel(label)}>{callEachLabel(label)}</AccordionTitle>) : ''
        }
      </Accordion>
    </MultiAtpLabelStyle>
  );
};

const mapStateToProps = (state) => ({
  cummulative: cummulativeSelector(state),
  preview: previewPageDataSelector(state)
});

MultiAccordion.propTypes = {
  cummulative: PropTypes.shape({
    atps: PropTypes.arrayOf(PropTypes.shape({
      referenceNumber: PropTypes.string,
      name: PropTypes.string
    }))
  }),
  preview: PropTypes.shape({
    previewRoutedFrom: PropTypes.string,
    atpsCollective: PropTypes.arrayOf(PropTypes.shape({
      referenceNumber: PropTypes.string,
      name: PropTypes.string
    }))
  }),
  icons: PropTypes.bool,
  isSingleOpen: PropTypes.bool,
  handleSelectedSections: PropTypes.func,
  getSingleATPSections: PropTypes.func,
  handleDownloadAtpCallBack: PropTypes.func.isRequired, // Callback to handle download
};

export default connect(mapStateToProps)(MultiAccordion);
