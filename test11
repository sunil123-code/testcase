export const handleDownloadATP = (configuration, trades, cumulative, preview, label, dispatch) => {
  if (!trades || trades.length === 0) {
    console.error("No trades available to process ATP download.");
    return;
  }

  const filename = generateFilename(trades, cumulative, preview);
  let atpData = {};

  // Filter the ATP data based on the label (ATP name)
  const selectedAtp = cumulative?.atps?.find(atp => atp.name === label) ||
                      preview?.atpsCollective?.find(atp => atp.name === label);

  if (selectedAtp) {
    atpData = {
      trades: trades.map(trade => ({ opicsId: trade.opicsId })),
      totalNoOfAtps: 1,
      atps: [{
        atpId: selectedAtp?.atpId || null,
        referenceDocId: selectedAtp?.referenceDocId || null,
        name: selectedAtp?.name || 'ATP',
        details: { ...selectedAtp.details },
        purpose: { ...selectedAtp.purpose },
        fxDisposition: { ...selectedAtp.fxDisposition },
        intendedBeneficiary: selectedAtp?.intendedBeneficiary,
      }]
    };
  } else {
    console.error("No ATP data found for the specified label.");
    return;
  }

  // Clean the payload by removing unnecessary fields
  atpData.atps.forEach(atp => {
    delete atp.details?.sumOfBuyAmounts;
    delete atp.supportingDocs;
  });

  // Convert empty strings to null in the payload
  const processedPayload = preparePayload(atpData);

  // Generate the download URL
  const url = getURL(configuration, API_NAME.DOWNLOADATP, endpoints);

  // Dispatch the processed payload with the constructed filename
  dispatch(onDownloadeAtp(configuration, filename, processedPayload, url));
};


=======================


const handleDownloadAtpCallBack = useCallback((label) => {
    handleDownloadATP(apiConfiguration, trades, cummulative, preview, label, dispatch);
}, [apiConfiguration, trades, cummulative, preview, dispatch]);


=============================

const multiAtpLabel = (atp) => {
    return (
      <AccordionRow style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <AccordionCol style={{ flex: '1', textAlign: 'left' }}>
          <span>{atp.name}</span> {/* Display the ATP name */}
        </AccordionCol>
        <AccordionCol style={{ flex: '0', textAlign: 'right' }}>
          <Button
            data-testid="button-submit"
            variant="small"
            buttonType="link"
            onClick={(e) => handleDownloadATPCallback(e, atp)} // Pass the ATP object when clicking
            leftIconName="ic_download"
          >
            Download ATP
          </Button>
        </AccordionCol>
      </AccordionRow>
    );
};
